#!/usr/bin/env bash

# Define colors (reverting to original scheme)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
PINK='\033[0;35m'

# Function to check if output is being piped
is_piped() {
    [ -t 1 ] && return 1 || return 0
}

# Function to conditionally apply color
color() {
    if is_piped; then
        cat
    else
        echo -en "$1"
        cat
        echo -en "$NC"
    fi
}

# Parse command line arguments
JSON_FORMAT=false
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -format=json) JSON_FORMAT=true ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Check if VAULT_TOKEN is set as an environment variable
if [ -z "$VAULT_TOKEN" ]; then
    # If not set, prompt the user to enter the Vault token
    read -sp "Enter your Vault token: " VAULT_TOKEN
    echo ""
else
    if [ "$JSON_FORMAT" = false ]; then
        echo "Using VAULT_TOKEN from environment variable." | color "$GREEN"
    fi
fi

# Function to discover nodes in the cluster
discover_nodes() {
    if [ "$JSON_FORMAT" = false ]; then
        echo "Discovering Vault cluster nodes..." | color "$BLUE"
    fi
    NODES=$(VAULT_TOKEN=$VAULT_TOKEN vault operator members -format=json | jq -r '.Nodes[].api_address')
    if [ "$JSON_FORMAT" = false ]; then
        echo "Discovered nodes:" | color "$BLUE"
        for NODE in $NODES; do
            echo "$NODE" | color "$YELLOW"
        done
    fi
}

# Function to get vault status from a node
get_vault_status() {
    if [ "$JSON_FORMAT" = false ]; then
        echo "=== Vault Status for $1 ===" | color "$RED"
        VAULT_ADDR=$1 VAULT_TOKEN=$VAULT_TOKEN vault status 2>&1 | colorize_vault_status
        echo ""
    else
        echo "\"Vault Status for $1\": "
        VAULT_ADDR=$1 VAULT_TOKEN=$VAULT_TOKEN vault status -format=json 2>&1 | jq
    fi
}

# Function to colorize vault status output
colorize_vault_status() {
    while IFS= read -r line; do
        if [[ $line == "Key"* || $line == "---"* ]]; then
            echo "$line" | color "$YELLOW"
        else
            key=$(echo "$line" | awk -F'[ ]{2,}' '{print $1}')
            value=$(echo "$line" | awk -F'[ ]{2,}' '{print $2}')
            printf "%-40s" "$key" | color "$BLUE"
            printf "%s\n" "$value" | color "$GREEN"
        fi
    done
}

# Function to get raft list-peers
get_raft_list_peers() {
    if [ "$JSON_FORMAT" = false ]; then
        echo "=== Raft List Peers ===" | color "$RED"
        VAULT_TOKEN=$VAULT_TOKEN vault operator raft list-peers 2>&1 | colorize_raft_list_peers
        echo ""
    else
        echo "\"Raft List Peers\": "
        VAULT_TOKEN=$VAULT_TOKEN vault operator raft list-peers -format=json 2>&1 | jq
    fi
}

# Function to colorize raft list-peers output
colorize_raft_list_peers() {
    while IFS= read -r line; do
        if [[ $line == "Node"* || $line == "----"* ]]; then
            echo "$line" | color "$YELLOW"
        else
            node=$(echo "$line" | awk '{print $1}')
            address=$(echo "$line" | awk '{print $2}')
            state=$(echo "$line" | awk '{print $3}')
            voter=$(echo "$line" | awk '{print $4}')

            if [[ $state == "leader" ]]; then
                printf "%-10s %-21s %-11s %-5s\n" "$node" "$address" "$state" "$voter" | color "$PINK"
            else
                printf "%-10s %-21s %-11s %-5s\n" "$node" "$address" "$state" "$voter" | color "$GREEN"
            fi
        fi
    done
}

# Function to get vault operator members
get_vault_operator_members() {
    if [ "$JSON_FORMAT" = false ]; then
        echo "=== Vault Operator Members ===" | color "$RED"
        VAULT_TOKEN=$VAULT_TOKEN vault operator members 2>&1 | colorize_vault_operator_members
        echo ""
    else
        echo "\"Vault Operator Members\": "
        VAULT_TOKEN=$VAULT_TOKEN vault operator members -format=json 2>&1 | jq
    fi
}

# Function to colorize vault operator members output
colorize_vault_operator_members() {
    while IFS= read -r line; do
        if [[ $line == "Host Name"* || $line == "---------"* ]]; then
            echo "$line" | color "$YELLOW"
        else
            host_name=$(echo "$line" | awk '{print $1}')
            api_address=$(echo "$line" | awk '{print $2}')
            cluster_address=$(echo "$line" | awk '{print $3}')
            active_node=$(echo "$line" | awk '{print $4}')
            version=$(echo "$line" | awk '{print $5}')
            upgrade_version=$(echo "$line" | awk '{print $6}')
            redundancy_zone=$(echo "$line" | awk '{print $7}')
            last_echo=$(echo "$line" | awk '{print $8}')

            if [[ $active_node == "true" ]]; then
                printf "%-18s %-30s %-30s %-12s %-9s %-17s %-17s %-20s\n" \
                    "$host_name" "$api_address" "$cluster_address" "$active_node" "$version" "$upgrade_version" "$redundancy_zone" "$last_echo" | color "$PINK"
            else
                printf "%-18s %-30s %-30s %-12s %-9s %-17s %-17s %-20s\n" \
                    "$host_name" "$api_address" "$cluster_address" "$active_node" "$version" "$upgrade_version" "$redundancy_zone" "$last_echo" | color "$GREEN"
            fi
        fi
    done
}

# Function to get vault license
get_vault_license() {
    if [ "$JSON_FORMAT" = false ]; then
        echo "=== Vault License ===" | color "$RED"
        VAULT_TOKEN=$VAULT_TOKEN vault license get -format=json 2>&1 | jq .data.autoloaded
        echo ""
    else
        echo "\"Vault License\": "
        VAULT_TOKEN=$VAULT_TOKEN vault license get -format=json 2>&1 | jq '.data.autoloaded'
    fi
}

# Function to get raft autopilot state
get_raft_autopilot_state() {
    if [ "$JSON_FORMAT" = false ]; then
        echo "=== Raft Autopilot State ===" | color "$RED"
        VAULT_TOKEN=$VAULT_TOKEN vault operator raft autopilot state 2>&1 | colorize_autopilot_state
        echo ""
    else
        echo "\"Raft Autopilot State\": "
        VAULT_TOKEN=$VAULT_TOKEN vault operator raft autopilot state -format=json 2>&1 | jq
    fi
}

# Function to colorize autopilot state output
colorize_autopilot_state() {
    while IFS= read -r line; do
        if [[ $line == "Voters:"* || $line == "Servers:"* || $line == "Upgrade Info:"* ]]; then
            echo "$line" | color "$YELLOW"
        elif [[ $line == *":"* ]]; then
            key=$(echo "$line" | awk -F: '{print $1}')
            value=$(echo "$line" | awk -F: '{print $2}' | sed 's/^[[:space:]]*//')
            echo -n "${key}:" | color "$BLUE"
            echo " ${value}" | color "$GREEN"
        elif [[ $line == *" "* ]]; then
            echo "$line" | color "$GREEN"
        else
            echo "$line"
        fi
    done
}

# Function to get raft autopilot config
get_raft_autopilot_config() {
    if [ "$JSON_FORMAT" = false ]; then
        echo "=== Raft Autopilot Config ===" | color "$RED"
        VAULT_TOKEN=$VAULT_TOKEN vault operator raft autopilot get-config 2>&1 | colorize_output_autopilot_config
        echo ""
    else
        echo "\"Raft Autopilot Config\": "
        VAULT_TOKEN=$VAULT_TOKEN vault operator raft autopilot get-config -format=json 2>&1 | jq
    fi
}

# Function to colorize autopilot config output
colorize_output_autopilot_config() {
    while IFS= read -r line; do
        if [[ $line == "Key"* || $line == "---"* ]]; then
            echo "$line" | color "$YELLOW"
        else
            key=$(echo "$line" | awk '{print substr($0, 1, 34)}')
            value=$(echo "$line" | awk '{print substr($0, 35)}')
            echo -n "$key" | color "$BLUE"
            echo "$value" | color "$GREEN"
        fi
    done
}

# Function to get replication status
get_replication_status() {
    if [ "$JSON_FORMAT" = false ]; then
        echo "=== Replication DR Status ===" | color "$RED"
        VAULT_TOKEN=$VAULT_TOKEN vault read -format=json sys/replication/dr/status | jq .data
        echo ""

        echo "=== Replication Performance Status ===" | color "$RED"
        VAULT_TOKEN=$VAULT_TOKEN vault read -format=json sys/replication/performance/status | jq .data
        echo ""
    else
        echo '"Replication Status": {'
        echo '"Replication DR Status": '
        VAULT_TOKEN=$VAULT_TOKEN vault read -format=json sys/replication/dr/status | jq .data
        echo ', "Replication Performance Status": '
        VAULT_TOKEN=$VAULT_TOKEN vault read -format=json sys/replication/performance/status | jq .data
        echo '}'
    fi
}

# Discover nodes in the cluster
discover_nodes

# Main script execution
if [ "$JSON_FORMAT" = true ]; then
    echo '{'
    echo '"Discovered Nodes": ['
    first_node=true
    for NODE in $NODES; do
        if [ "$first_node" = false ]; then
            echo ','
        fi
        first_node=false
        echo "{"
        echo "\"node\": \"$NODE\","
        get_vault_status $NODE
        echo "}"
    done
    echo '],'

    get_raft_list_peers
    echo ','

    get_vault_operator_members
    echo ','

    get_vault_license
    echo ','

    get_raft_autopilot_state
    echo ','

    get_raft_autopilot_config
    echo ','

    get_replication_status

    echo '}'
else
    for NODE in $NODES; do
        get_vault_status $NODE
    done

    get_raft_list_peers
    get_vault_operator_members
    get_vault_license
    get_raft_autopilot_state
    get_raft_autopilot_config
    get_replication_status
fi
